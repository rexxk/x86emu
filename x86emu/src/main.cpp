
#include <vector>
#include <unordered_map>

#include <iostream>

#include "cpu/InstructionDecoder.h"



int main()
{
	std::cout << "x86 emulator\n";


//	std::vector<uint8_t> execStream =
//	{
//		0x13, 0xCB,
//		0x89, 0xCA,
//		0xB9,
//		0x90,
//		0x3e, 0x66, 0x67, 0x89, 0x1e,
//		0x26, 0x89, 0x05,
//		0x3e, 0x89, 0x1c,
//		0x3e, 0x89, 0x54, 0x0c,
//		0x64, 0x89, 0x10,
//		0x64, 0x66, 0x67, 0x89, 0x90, 0x00, 0x01,
//		0x64, 0x89, 0x90, 0x00, 0x01,
//	};

//	std::vector<uint8_t> execStream =
//	{
//		0xb8, 0x00, 0x00, 0x8e, 0xc8, 0x8e, 0xd8, 0x8e, 0xc0, 0xb8, 0x00, 0x7c, 0x8e, 0xd0, 0xbc, 0xff, 0x00,
//	};

//	std::vector<uint8_t> execStream =
//	{
//		0x88, 0xd8, 0x89, 0xd8, 0x66, 0x89, 0xd8, 0x88, 0xcc, 0x90,
//	};

	std::vector<uint8_t> execStream =
	{
//		0x31, 0xdb, 0xb8, 0x0c, 0x00, 0x01, 0xc3, 0x26, 0x89, 0x1d, 0x3e, 0x83, 0x04, 0x09, 0x83, 0xc0, 0x07, 0xfa, 0x90,
//		0xb8, 0x0c, 0x00, 0x01, 0xc3, 0x26, 0x89, 0x1d, 0x83, 0xc0, 0x07, 0xfa, 0x90,

		0x31, 0xc0, 0x8e, 0xd8, 0x8e, 0xc0, 0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0xff, 0x1f, 0x8a, 0x16,
		0x4c, 0x00, 0x88, 0x16, 0x4e, 0x00, 0xbe, 0x3d, 0x00, 0xe8, 0x1d, 0x00, 0xfa, 0xb8, 0x00, 0x02,
		0x8e, 0xc0, 0xb8, 0x01, 0x00, 0xe8, 0x13, 0x00, 0xa0, 0x4d, 0x00, 0x31, 0xdb, 0xe8, 0x0a, 0x00,
		0x73, 0x0a, 0xbe, 0x44, 0x00, 0xe8, 0x01, 0x00, 0xf4, 0xc3, 0xc3, 0xc3, 0xc3,
	};

	for (auto it = execStream.begin(); it != execStream.end(); it++)
	{
		InstructionDecoder decoder(it);
		InstructionDecoder::DecoderResult result = decoder.GetResult();

		if (result.ValidCommand)
		{
			std::cout << " - " << result.CommandLine << "\n";
		}
	}


	/*
		xor     ax, ax
        mov     ds, ax
        mov     es, ax

        mov     ax, 0x0000
        mov     ss, ax
        mov     sp, 0x1FFF

        mov     dl, [bpbDriveNumber]
        mov     [driveNumber], dl

        mov     si, bootMsg
        call    PrintString

        cli

        ; Load second stage

        ; Load FAT to 0x0200:0x0000 (0x2000)

        mov     ax, 0x0200      ; Put FAT 
        mov     es, ax

        mov     ax, 1           ; LBA = 1

        call    LBA2CHS

        mov     al, [bpbSectorsPerFAT]
        xor     bx, bx

        call    ReadSectors

        jnc     LoadRootDirectory

        mov     si, errorMsg
        call    PrintString

        hlt

PrintString:
		ret
		
ReadSectors:
		ret
		
LBA2CHS:
		ret
		
LoadRootDirectory:
		ret
		
bootMsg:			db "Test", 13, 10, 0
errorMsg:			db "Error", 13, 10, 0
		
bpbDriveNumber:		db	0
bpbSectorsPerFAT:	db	1

driveNumber:		db	0


	*/
}
