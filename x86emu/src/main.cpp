
#include <vector>
#include <unordered_map>

#include <iostream>

#include "cpu/InstructionDecoder.h"



int main()
{
	std::cout << "x86 emulator\n";


//	std::vector<uint8_t> execStream =
//	{
//		0x13, 0xCB,
//		0x89, 0xCA,
//		0xB9,
//		0x90,
//		0x3e, 0x66, 0x67, 0x89, 0x1e,
//		0x26, 0x89, 0x05,
//		0x3e, 0x89, 0x1c,
//		0x3e, 0x89, 0x54, 0x0c,
//		0x64, 0x89, 0x10,
//		0x64, 0x66, 0x67, 0x89, 0x90, 0x00, 0x01,
//		0x64, 0x89, 0x90, 0x00, 0x01,
//	};

//	std::vector<uint8_t> execStream =
//	{
//		0xb8, 0x00, 0x00, 0x8e, 0xc8, 0x8e, 0xd8, 0x8e, 0xc0, 0xb8, 0x00, 0x7c, 0x8e, 0xd0, 0xbc, 0xff, 0x00,
//	};

//	std::vector<uint8_t> execStream =
//	{
//		0x88, 0xd8, 0x89, 0xd8, 0x66, 0x89, 0xd8, 0x88, 0xcc, 0x90,
//	};

	std::vector<uint8_t> execStream =
	{
		0x31, 0xdb, 0xb8, 0x0c, 0x00, 0x01, 0xc3, 0x26, 0x89, 0x1d, 0x3e, 0x83, 0x04, 0x09, 0x83, 0xc0, 0x07, 0xfa, 0x90,
//		0xb8, 0x0c, 0x00, 0x01, 0xc3, 0x26, 0x89, 0x1d, 0x83, 0xc0, 0x07, 0xfa, 0x90,
	};

	for (auto it = execStream.begin(); it != execStream.end(); it++)
	{
		InstructionDecoder decoder(it);
		InstructionDecoder::DecoderResult result = decoder.GetResult();

		if (result.ValidCommand)
		{
			std::cout << " - " << result.CommandLine << "\n";
		}
	}

}
